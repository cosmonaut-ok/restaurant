# Makefile.in --- Makefile template  -*- Makefile -*-

# Copyright (C) 2016 Alexander aka 'CosmonauT' Vynnyk

# Maintainer: cosmonaut.ok@zoho.com
# Keywords: internal
# Package: restaurant

# This file is part of Restaurant.

# Restaurant is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Restaurant is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Restaurant.  If not, see <http://www.gnu.org/licenses/>.

# Commentary:

# TODO:

# Code:

EMACS_URI=@EMACS_URI@
BUILD_DIR=@BUILD_DIR@
ARCHIVE_NAME=$(shell basename ${EMACS_URI})

## f*king github with its name conventions!
SOURCE_DIR=emacs-$(shell basename ${EMACS_URI} .tar.gz)
RUBY=$(shell which ruby)
BUNDLE=$(shell which bundle)
RVM=$(shell which rvm)
RESTAURANT_VERSION=$(shell grep autoconf-anchor src/restaurant-version.el | cut -d\" -f2 | tr -d \\n)
LOCAL_EMACS=@LOCAL_EMACS_DIR@/bin/emacs
CURRENT_DIR=$(shell pwd)
LDLIB=$LD_LIBRARY_PATH:${CURRENT_DIR}/@LOCAL_EMACS_DIR@/lib/

all: build clean-build clean

emacs:
ifeq (@STATIC@, yes)
	@echo "Static build enabled. Getting Emacs precompiled binaries..."
	@wget -qO- https://github.com/restaurant-ide/restaurant/releases/download/v0.1.2/emacs-restaurant.tar.gz | tar xz
else
	@echo "Making temporary working directory ${BUILD_DIR}"
	@mkdir -p ${BUILD_DIR}/emacs-build
	@mkdir -p ${BUILD_DIR}/restaurant
	@echo "Getting emacs archive..."
	@test -f ${ARCHIVE_NAME} || curl -L --progress-bar ${EMACS_URI} > ${ARCHIVE_NAME}
	@cp ${ARCHIVE_NAME} ${BUILD_DIR}
	@echo "Unpacking emacs archive..."
	@tar -C ${BUILD_DIR} -xf ${BUILD_DIR}/${ARCHIVE_NAME}
	@echo "Preparing emacs archive..."
	@for i in `ls ${BUILD_DIR}/${SOURCE_DIR}/etc/images/icons/hicolor/ | grep -E [0-9]`; do rm -f ${BUILD_DIR}/${SOURCE_DIR}/etc/images/icons/hicolor/$$i/apps/emacs.png; done
	@for i in `ls ${BUILD_DIR}/${SOURCE_DIR}/etc/images/icons/hicolor/ | grep -E [0-9]`; do convert -resize $$i data/icons/restaurant.svg ${BUILD_DIR}/${SOURCE_DIR}/etc/images/icons/hicolor/$$i/apps/emacs.png; done
	@cp data/icons/restaurant.svg ${BUILD_DIR}/${SOURCE_DIR}/etc/images/icons/hicolor/scalable/apps/emacs.svg
	@echo "Building emacs..."
	@cd ${BUILD_DIR}/${SOURCE_DIR} && \
	autoreconf -fi -I m4 ## emacs 25
	cd ${BUILD_DIR}/${SOURCE_DIR} && \
	./configure --prefix=/ --with-x-toolkit=@GUI_TOOLKIT@ @BUILD_OPTIONS@ && \
	make && \
	make install DESTDIR=${BUILD_DIR}/emacs-build
	@echo "Preparing to working state..."
	@cp -r ${BUILD_DIR}/${SOURCE_DIR}/lib-src/ ${BUILD_DIR}/emacs-build/lib-src/
	@mv -f ${BUILD_DIR}/emacs-build/share/@LOCAL_EMACS_DIR@/25.1/* ${BUILD_DIR}/emacs-build/
	@mv -f ${BUILD_DIR}/emacs-build/share/man/ ${BUILD_DIR}/emacs-build/
	@mv -f ${BUILD_DIR}/emacs-build/share/info/ ${BUILD_DIR}/emacs-build/
	@echo "Stripping from unneded files..."
	@rm -rf ${BUILD_DIR}/emacs-build/share/
	@rm -rf ${BUILD_DIR}/emacs-build/var/
	@find ${BUILD_DIR}/emacs-build/ -type f -name '*.el.gz' -delete
	@echo "Moving to current directory as ''emacs''..."
	@mv ${BUILD_DIR}/emacs-build/ emacs
	@rm -f @LOCAL_EMACS_DIR@/etc/images/splash.png
endif

el-get: emacs
ifeq (@STATIC@, yes)
	@echo "Static build enabled. Getting prepared el-get libraries..."
	@wget -qO- https://github.com/restaurant-ide/restaurant/releases/download/v0.1.2/el-get-packages.tar.gz | tar xz
else
	@echo "Getting required dependencies via el-get..."
	@EMACSDATA=${CURRENT_DIR}/@LOCAL_EMACS_DIR@/etc/ LD_LIBRARY_PATH=${LDLIB} ${LOCAL_EMACS} -Q --debug-init --script ./src/bootstrap.el
	@cd ${CURRENT_DIR}/el-get/yasnippets && ln -s ruby-mode enh-ruby-mode
endif
	@cat el-get/robe-mode/Gemfile >> Gemfile

lib: emacs
	@echo "Building 3rd party libraries..."
	@mkdir lib
	@cd scripts && for i in `ls *.sh | grep -v tmpl.sh`; do \
		/bin/bash $$i install -v; \
	done
ifeq (@BYTE_COMPILE_P@, yes)
	@for i in `find lib -type f -name '*.el'`; do \
		EMACSDATA=${CURRENT_DIR}/@LOCAL_EMACS_DIR@/etc/ LD_LIBRARY_PATH=${LDLIB} ${LOCAL_EMACS} -Q -batch --eval "(byte-compile-file \"$$i\")"; \
	done
endif

build: el-get lib
	@echo "Building restaurant..."
ifeq (@BYTE_COMPILE_P@, yes)
	@EMACSDATA=${CURRENT_DIR}/@LOCAL_EMACS_DIR@/etc/ LD_LIBRARY_PATH=${LDLIB} ${LOCAL_EMACS} -Q -batch --script ./init.el
endif
	@touch build

bootstrap: build
	@echo "Chekcing if all needed components are installed..."
ifneq ($(RUBY),yes)
	@echo "ERROR: there is no ruby in system. Exiting" && exit 1
endif
ifneq ($(BUNDLE),yes)
	@echo "ERROR: there is no ruby in system. Exiting" && exit 1
endif
	@echo "Building restaurant starting dependencies..."
	@cd bundle install
ifeq ($(RVM),yes)
	@echo "Generating RI documentation..."
	@rvm docs generate
endif
	@touch bootstrap

install: build
	@echo install

clean-build:
	@echo "Clearing build directory..."
	@[ -d ${BUILD_DIR} ] && rm -rf ${BUILD_DIR} || return 0

clean:
	@echo "Clearing working directory..."
	@rm -rf autom4te.cache config.log conf18498.dir config.status
	@find . -type f -name '*~' -delete
	@find . -type f -name '*#$$' -delete
	@find . -type f -name '*^#*' -delete

clean-emacs: clean-build
	@rm -rf emacs

clean-precompile:
	@echo "Cleaning precompiled elc files..."
	@rm -f src/*.elc
	@[ -d lib ] && find lib -type f -name '*.elc' -delete || return 0

mrproper: clean-emacs clean clean-precompile
	@echo "Clearing emacs 3rt-party data dirs..."
	@rm -rf build el-get elpa configure Makefile Gemfile.lock ${ARCHIVE_NAME} Gemfile lib restaurant build

package: build clean-build clean
	@echo "Building package..."
	@mkdir -p ${BUILD_DIR}/restaurant/
	@for i in @RELEASE_FILES@; do cp -rp $$i ${BUILD_DIR}/restaurant/; done
	@touch ${BUILD_DIR}/restaurant/build
	@echo "Stripping package from unneded files..."
	@find ${BUILD_DIR}/restaurant/ -type d -name '.git' -exec rm -rf {} +
	@find ${BUILD_DIR}/restaurant/ -type f -name '.gitignore' -delete
	# optimizing size
	rm -rf ${BUILD_DIR}/restaurant/el-get/ecb/html
	rm -rf ${BUILD_DIR}/restaurant/el-get/ecb/html-help
	rm -rf ${BUILD_DIR}/restaurant/el-get/cedet/doc
	rm -rf ${BUILD_DIR}/restaurant/el-get/cedet/tests
	rm -rf ${BUILD_DIR}/restaurant/el-get/magit/Documentation/
	rm -rf ${BUILD_DIR}/restaurant/el-get/color-theme/color-theme*tar.gz
	# TODO: move needed snippets to own directory
	# TODO: add external libraries
	@echo "Packaging..."
	@cd ${BUILD_DIR} && tar -czpf restaurant-${RESTAURANT_VERSION}-@GUI_TOOLKIT@.tar.gz restaurant
	@cp ${BUILD_DIR}/restaurant-${RESTAURANT_VERSION}-@GUI_TOOLKIT@.tar.gz .
	# hack to change emacs icons to restaurant

release: package clean-emacs clean

test: build
	@touch /tmp/.restaurant-mock.rb
	@./restaurant --batch /tmp/.restaurant-mock.rb || exit 1
	@rm -f /tmp/.restaurant-mock.rb

libdeps:
	@mkdir -p ${CURRENT_DIR}/@LOCAL_EMACS_DIR@/lib/
	@cp -H /usr/lib/x86_64-linux-gnu/libgnutls-deb0.so.28 ${CURRENT_DIR}/@LOCAL_EMACS_DIR@/lib/
	@cp -H /usr/lib/x86_64-linux-gnu/libhogweed.so.2 ${CURRENT_DIR}/@LOCAL_EMACS_DIR@/lib/

help:
	@echo "Restaurant Chef IDE v. ${RESTAURANT_VERSION}"
	@echo "Options:"
	@echo "       all targets: $(shell cat Makefile | grep -E '^[a-z].*\:' | cut -d: -f1| tr ":" " ")"
	@echo
	@echo "       most important targets:"
	@echo "       build       - build restaurant (w/o emacs. Just bootstrap)"
	@echo "       install     - install restaurant (not implemented yet. Just local usage)"
	@echo "       emacs       - build emacs locally to work with restaurant"
	@echo "       release     - perform completely building and packaging restaurant"
	@echo "       clean       - clean working directory from unndeded files"
	@echo "       mrproper    - perform fully cleaning. Leaving only files, required for"
	@echo "                     building restaurant (Restaurant will not works after that)"
